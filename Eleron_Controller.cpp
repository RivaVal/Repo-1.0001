

      //===============================================
      //  4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Eleron_Controller.cpp
      //=================================================

      //  #include "Eleron_Controller.h"
      //  #include <driver/ledc.h>
        //      Eleron_Controller.cpp
        //  cpp
#include "Eleron_Controller.h"
#include <driver/ledc.h>
#include <math.h>

        //          #define PI 3.14159265358979323846

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤
const int servoPins[] = {12, 13, 14, 27, 26};
const ledc_channel_t channels[] = {
    LEDC_CHANNEL_0, LEDC_CHANNEL_1, LEDC_CHANNEL_2, 
    LEDC_CHANNEL_3, LEDC_CHANNEL_4
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
uint32_t EleronController::last_update_time = 0;
int EleronController::current_angles[5] = {90, 90, 90, 90, 90};
bool EleronController::test_running = false;
uint32_t EleronController::test_start_time = 0;

void EleronController::begin() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞ LEDC
    ledc_timer_config_t timer_conf = {};
    timer_conf.speed_mode = LEDC_LOW_SPEED_MODE;
    timer_conf.duty_resolution = LEDC_TIMER_12_BIT;
    timer_conf.timer_num = LEDC_TIMER_0;
    timer_conf.freq_hz = 50;
    timer_conf.clk_cfg = LEDC_AUTO_CLK;
    ledc_timer_config(&timer_conf);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    for (int i = 0; i < 5; i++) {
        ledc_channel_config_t channel_conf = {};
        channel_conf.gpio_num = servoPins[i];
        channel_conf.speed_mode = LEDC_LOW_SPEED_MODE;
        channel_conf.channel = channels[i];
        channel_conf.intr_type = LEDC_INTR_DISABLE;
        channel_conf.timer_sel = LEDC_TIMER_0;
        channel_conf.duty = 0;
        channel_conf.hpoint = 0;
        ledc_channel_config(&channel_conf);
        
        setServoAngle(i, 90); // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    }
    
    last_update_time = millis();
    Serial.println("‚úÖ EleronController initialized");
}

void EleronController::setNeutralPosition() {
    for (int i = 0; i < 5; i++) {
        setServoAngle(i, 90); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
    }
    Serial.println("‚úÖ Servos set to neutral position");
}

void EleronController::update(const SensorData& data) {
    uint32_t current_time = millis();
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è millis()
    if ((current_time - last_update_time) < UPDATE_INTERVAL && 
        current_time >= last_update_time) {
        return;
    }
    
    if (test_running) {
        runTestSequence(); // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞
    } else {
        processIMUData(data); // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    }
    
    last_update_time = current_time;
}

void EleronController::processIMUData(const SensorData& data) {
    // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    int pitch_angle = map(data.euler[1], -90, 90, 0, 180);
    int roll_angle = map(data.euler[0], -90, 90, 0, 180);
    
    setServoAngle(0, roll_angle);
    setServoAngle(1, pitch_angle);
    setServoAngle(2, 90);
    setServoAngle(3, 180 - roll_angle);
    setServoAngle(4, 90);
}

void EleronController::setServoAngle(uint8_t channel, int angle) {
    if (channel >= 5) return; // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    
    angle = constrain(angle, 0, 180);
    current_angles[channel] = angle;
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–≥–ª–∞ –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã (500-2400Œºs)
    int pulse_width = map(angle, 0, 180, 500, 2400);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ duty —Ü–∏–∫–ª (12-bit resolution, 50Hz)
    uint32_t duty = (pulse_width * 4096UL) / 20000UL;
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤–º–µ—Å—Ç–æ constrain –¥–ª—è unsigned)
    if (duty > 4095) duty = 4095;
    
    ledcWrite(channels[channel], duty);
}

void EleronController::startTestSequence() {
    test_running = true;
    test_start_time = millis();
    Serial.println("üöÄ Starting servo test sequence for all 5 servos...");
}

void EleronController::stopTestSequence() {
    test_running = false;
    Serial.println("üõë Servo test sequence stopped");
    setNeutralPosition(); // –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
}

void EleronController::runTestSequence() {
    if (!test_running) return;
    
    uint32_t current_time = millis();
    uint32_t elapsed = current_time - test_start_time;
    uint32_t phase_time = elapsed % 8000; // 8-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ü–∏–∫–ª
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
    for (int i = 0; i < 5; i++) {
        int angle = 90; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        
        // –†–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞
        switch (i) {
            case 0: // –°–µ—Ä–≤–æ 0: –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ 0-180-0
                angle = (phase_time < 4000) ? 
                    map(phase_time, 0, 4000, 0, 180) :
                    map(phase_time, 4000, 8000, 180, 0);
                break;
                
            case 1: // –°–µ—Ä–≤–æ 1: –±—ã—Å—Ç—Ä—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
                angle = 90 + 60 * sin(2 * PI * phase_time / 2000.0);
                break;
                
            case 2: // –°–µ—Ä–≤–æ 2: —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                if (phase_time < 2000) angle = 45;
                else if (phase_time < 4000) angle = 90;
                else if (phase_time < 6000) angle = 135;
                else angle = 90;
                break;
                
            case 3: // –°–µ—Ä–≤–æ 3: –º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                angle = map(phase_time, 0, 8000, 0, 180);
                break;
                
            case 4: // –°–µ—Ä–≤–æ 4: —Å–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
                angle = 90 + 30 * sin(2 * PI * phase_time / 3000.0) + 
                        20 * cos(2 * PI * phase_time / 5000.0);
                break;
        }
        
        angle = constrain(angle, 0, 180);
        setServoAngle(i, angle);
    }
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
    if (elapsed % 1000 < 20) {
        Serial.printf("üîß Test running: %lu ms | Angles: %d, %d, %d, %d, %d\n",
            elapsed, current_angles[0], current_angles[1], current_angles[2],
            current_angles[3], current_angles[4]);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
    if (elapsed > 60000) {
        stopTestSequence();
    }
}

