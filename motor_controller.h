

//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//  ПРИВЕТ!! Окружение: Arduino IDE, микроконтроллер esp32, моторы без драйверов, 
//  управляются напрямую от ESP32 , используются два пина для двух моторов: GPIO25 для 
//  мотора_А и GPIO26 для мотора_Б ,моторы питаются через регулятор скорости BLHeli 
//  EMAX ESC от источника питания: 21V, 6500 mAh   Исходные файлы проекта находятся по 
//  адресу: https://github.com/RivaVal/Repo-1.0001.git Прошу  проанализировать код 
//  проекта из github, прошу на основе уже существующих мождулей, дать вариант МОДУЛЯ 
//  управления двумя моторами при движении моторов в одну сторону: QX Motor QF(2827) 2227-1800KV 
//  без драйвера, на основе последней актуальной версии mcpwm, НУЖЕН вариант кода, который 
//  можно вписать в существующню структуру проекта! Прошу дать вариант кода с полной 
//  документацией и подробным описанием, а так же добавить код для тестового прогона 
//  двигателей:
//  1.Последовательность работы при тестовом прогоне:
//  2. Плавный старт моторов до тестового уровня
//  3. Работа на тестовом уровне в течение 4 минут
//  4. Плавная остановка моторов !
//  
//  Привет! Проанализировал ваш проект. Вот модуль для управления моторами через 
//  ESC с тестовым прогоном:
//  Модуль управления моторами через ESC (motor_controller.h)
//  
//=============================================================================
//=============================================================================
//=============================================================================

//  Вы абсолютно правы! Используется устаревший драйвер MCPWM. Вот обновленная 
//  версия с актуальным драйвером mcpwm_prelude.h:
//  Обновленный модуль с актуальным MCPWM (motor_controller.h)


//  / * *
//   * Модуль для управления двумя моторами QX Motor QF(2827) 2227-1800KV
//   * через ESC регуляторы BLHeli EMAX с использованием нового MCPWM Prelude API.
//   * Только движение в одну сторону.
//   * Версия: 2.0.0 (с актуальным MCPWM Prelude)
//   * 
//   * Подключение: 
//   * - GPIO25 -> ESC мотора A
//   * - GPIO26 -> ESC мотора B  
//   * Питание: 21V, 6500mAh
//  
//   * /
//   *     |   ^
//   * Только движение в одну сторону.
//   * Версия: 2.0.1 (исправлены предупреждения инициализации)
//   * /

#ifndef MOTOR_CONTROLLER_H
#define MOTOR_CONTROLLER_H

#include <Arduino.h>
#include <driver/mcpwm_prelude.h>

class MotorController {
private:
  // Конфигурация пинов ESC
  const int ESC_A_PIN = 25;
  const int ESC_B_PIN = 26;
  
  // Параметры ESC (микросекунды)
  const int ESC_MIN_US = 1000;    // 0% скорости (стоп)
  const int ESC_MAX_US = 2000;    // 100% скорости
  const int ESC_NEUTRAL_US = 1500; // Нейтральное положение
  
  // Параметры тестового прогона
  const int TEST_SPEED_PERCENT = 70;  // Тестовая скорость (70%)
  const int TEST_DURATION_SEC = 240;  // Длительность теста (240 сек = 4 мин)
  const int PWM_FREQUENCY = 50;       // 50 Hz для ESC
  
  // MCPWM объекты
  mcpwm_timer_handle_t timer_a = NULL;
  mcpwm_timer_handle_t timer_b = NULL;
  mcpwm_oper_handle_t oper_a = NULL;
  mcpwm_oper_handle_t oper_b = NULL;
  mcpwm_cmpr_handle_t comparator_a = NULL;
  mcpwm_cmpr_handle_t comparator_b = NULL;
  mcpwm_gen_handle_t generator_a = NULL;
  mcpwm_gen_handle_t generator_b = NULL;
  
  // Текущие скорости моторов (0-100%)
  int current_speed_a;
  int current_speed_b;
  
  // Флаги состояния
  bool is_test_running;
  unsigned long test_start_time;
  
  /**
   * Инициализация MCPWM для ESC с новым API
   */
  void init_esc_mcpwm_prelude();
  
  /**
   * Преобразование процентов в микросекунды для ESC
   * @param speed_percent Скорость в процентах (0-100)
   * @return int Ширина импульса в микросекундах
   */
  int percent_to_us(int speed_percent);
  
  /**
   * Установка скорости для ESC
   * @param speed_percent Скорость в процентах (0-100)
   * @param motor_id Идентификатор мотора ('A' или 'B')
   */
  void set_esc_speed(int speed_percent, char motor_id);
  
  /**
   * Плавное изменение скорости
   * @param target_speed Целевая скорость (0-100%)
   * @param duration Время изменения (сек)
   */
  void ramp_speed(int target_speed, float duration);

public:
  /**
   * Конструктор контроллера моторов
   */
  MotorController();
  
  /**
   * Деструктор для очистки ресурсов
   */
  ~MotorController();
  
  /**
   * Инициализация ESC
   */
  void init_esc();
  
  /**
   * Установка скорости моторов
   * @param speed Скорость в процентах (0-100)
   * @param ramp_time Время плавного изменения (сек)
   * @return bool Успешность выполнения
   */
  bool set_motors_speed(int speed, float ramp_time = 0);
  
  /**
   * Остановка моторов
   * @param ramp_time Время плавной остановки (сек)
   */
  void stop_motors(float ramp_time = 0);
  
  /**
   * Запуск тестового прогона
   */
  void start_test_sequence();
  
  /**
   * Остановка тестового прогона
   */
  void stop_test_sequence();
  
  /**
   * Получение статуса моторов
   * @return String Статус в JSON формате
   */
  String get_motors_status();
  
  /**
   * Проверка выполнения тестового прогона
   * @return bool true если тест выполняется
   */
  bool is_test_active();
  
  /**
   * Обновление состояния (вызывать в loop)
   */
  void update();
};

// Глобальный экземпляр контроллера моторов
extern MotorController motor_controller;

#endif

