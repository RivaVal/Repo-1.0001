

//=============================================================================
//==============    ( motor_controller.cpp )  ===================================
//=============================================================================
//==============================================================================
//==============================================================================
//==============================================================================
//	üìÑ motor_controller.cpp (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
//==============================================================================
//üìÑ   motor_controller.cpp (–µ–¥–∏–Ω—ã–π —Ñ–∞–π–ª)
//=============================================================================
//  üìÑ motor_controller.cpp (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
//=============================================================================

#include <Arduino.h>
#include "motor_controller.h"
#include "Config.h"
MotorController motor_controller;

MotorController::MotorController() 
    : current_speed_a(0), current_speed_b(0),
      is_test_running(false), test_start_time(0), last_report_time(0) {
}

MotorController::~MotorController() {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    safe_delete(generator_a);
    safe_delete(generator_b);
    safe_delete(comparator_a);
    safe_delete(comparator_b);
    safe_delete(oper_a);
    safe_delete(oper_b);
    safe_delete(timer_a);
    safe_delete(timer_b);
}

void MotorController::safe_delete(mcpwm_timer_handle_t& handle) {
    if (handle) {
        esp_err_t err = mcpwm_del_timer(handle);
        if (err == ESP_OK) handle = nullptr;
    }
}

void MotorController::safe_delete(mcpwm_oper_handle_t& handle) {
    if (handle) {
        esp_err_t err = mcpwm_del_operator(handle);
        if (err == ESP_OK) handle = nullptr;
    }
}

void MotorController::safe_delete(mcpwm_cmpr_handle_t& handle) {
    if (handle) {
        esp_err_t err = mcpwm_del_comparator(handle);
        if (err == ESP_OK) handle = nullptr;
    }
}

void MotorController::safe_delete(mcpwm_gen_handle_t& handle) {
    if (handle) {
        esp_err_t err = mcpwm_del_generator(handle);
        if (err == ESP_OK) handle = nullptr;
    }
}

bool MotorController::init_esc() {
    Serial.println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCPWM Prelude API");
    
    init_mcpwm_components();
    setup_generator_actions();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
    set_motors_speed(0);
    
    Serial.println("MotorController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    Serial.printf("ESC –ø–∏–Ω—ã: GPIO%d (–ú–æ—Ç–æ—Ä A), GPIO%d (–ú–æ—Ç–æ—Ä B)\n", ESC_A_PIN, ESC_B_PIN);
    return true;
}

void MotorController::init_mcpwm_components() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    mcpwm_timer_config_t timer_config = {};
    timer_config.group_id = 0;
    timer_config.clk_src = MCPWM_TIMER_CLK_SRC_DEFAULT;
    timer_config.resolution_hz = 10000000; // 10MHz
    timer_config.count_mode = MCPWM_TIMER_COUNT_MODE_UP;
    timer_config.period_ticks = 200000; // 50Hz: 10MHz/50Hz = 200000 ticks
    timer_config.intr_priority = 0;
    timer_config.flags.update_period_on_empty = true;
    timer_config.flags.update_period_on_sync = true;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤
    ESP_ERROR_CHECK(mcpwm_new_timer(&timer_config, &timer_a));
    ESP_ERROR_CHECK(mcpwm_new_timer(&timer_config, &timer_b));
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    mcpwm_operator_config_t operator_config = {};
    operator_config.group_id = 0;
    operator_config.intr_priority = 0;
    operator_config.flags.update_gen_action_on_tez = true;
    operator_config.flags.update_gen_action_on_tep = false;
    operator_config.flags.update_gen_action_on_sync = false;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    ESP_ERROR_CHECK(mcpwm_new_operator(&operator_config, &oper_a));
    ESP_ERROR_CHECK(mcpwm_new_operator(&operator_config, &oper_b));
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫ —Ç–∞–π–º–µ—Ä–∞–º
    ESP_ERROR_CHECK(mcpwm_operator_connect_timer(oper_a, timer_a));
    ESP_ERROR_CHECK(mcpwm_operator_connect_timer(oper_b, timer_b));
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    mcpwm_comparator_config_t comparator_config = {};
    comparator_config.intr_priority = 0;
    comparator_config.flags.update_cmp_on_tez = true;
    comparator_config.flags.update_cmp_on_tep = false;
    comparator_config.flags.update_cmp_on_sync = false;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–≤
    ESP_ERROR_CHECK(mcpwm_new_comparator(oper_a, &comparator_config, &comparator_a));
    ESP_ERROR_CHECK(mcpwm_new_comparator(oper_b, &comparator_config, &comparator_b));
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
    mcpwm_generator_config_t generator_config = {};
    generator_config.flags.io_loop_back = false;
    generator_config.flags.io_od_mode = false;
    generator_config.flags.pull_up = false;
    generator_config.flags.pull_down = false;
    
    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ—Ç–æ—Ä–∞ A
    generator_config.gen_gpio_num = ESC_A_PIN;
    ESP_ERROR_CHECK(mcpwm_new_generator(oper_a, &generator_config, &generator_a));
    
    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ—Ç–æ—Ä–∞ B
    generator_config.gen_gpio_num = ESC_B_PIN;
    ESP_ERROR_CHECK(mcpwm_new_generator(oper_b, &generator_config, &generator_b));
    
    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–æ–≤
    ESP_ERROR_CHECK(mcpwm_timer_enable(timer_a));
    ESP_ERROR_CHECK(mcpwm_timer_start_stop(timer_a, MCPWM_TIMER_START_NO_STOP));
    
    ESP_ERROR_CHECK(mcpwm_timer_enable(timer_b));
    ESP_ERROR_CHECK(mcpwm_timer_start_stop(timer_b, MCPWM_TIMER_START_NO_STOP));
}

    //  motor_controller.cpp (—Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—è setup_generator_actions)
    //  cpp
void MotorController::setup_generator_actions() {
    // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è ESP-IDF –º–∞–∫—Ä–æ—Å–æ–≤
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wmissing-field-initializers"
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –º–æ—Ç–æ—Ä–∞ A
    ESP_ERROR_CHECK(mcpwm_generator_set_actions_on_timer_event(
        generator_a,
        MCPWM_GEN_TIMER_EVENT_ACTION(MCPWM_TIMER_DIRECTION_UP, MCPWM_TIMER_EVENT_EMPTY, MCPWM_GEN_ACTION_HIGH),
        MCPWM_GEN_TIMER_EVENT_ACTION_END()
    ));
    
    ESP_ERROR_CHECK(mcpwm_generator_set_actions_on_compare_event(
        generator_a,
        MCPWM_GEN_COMPARE_EVENT_ACTION(MCPWM_TIMER_DIRECTION_UP, comparator_a, MCPWM_GEN_ACTION_LOW),
        MCPWM_GEN_COMPARE_EVENT_ACTION_END()
    ));
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –º–æ—Ç–æ—Ä–∞ B
    ESP_ERROR_CHECK(mcpwm_generator_set_actions_on_timer_event(
        generator_b,
        MCPWM_GEN_TIMER_EVENT_ACTION(MCPWM_TIMER_DIRECTION_UP, MCPWM_TIMER_EVENT_EMPTY, MCPWM_GEN_ACTION_HIGH),
        MCPWM_GEN_TIMER_EVENT_ACTION_END()
    ));
    
    ESP_ERROR_CHECK(mcpwm_generator_set_actions_on_compare_event(
        generator_b,
        MCPWM_GEN_COMPARE_EVENT_ACTION(MCPWM_TIMER_DIRECTION_UP, comparator_b, MCPWM_GEN_ACTION_LOW),
        MCPWM_GEN_COMPARE_EVENT_ACTION_END()
    ));
    
    #pragma GCC diagnostic pop
}


int MotorController::percent_to_us(int speed_percent) const {
    speed_percent = constrain(speed_percent, 0, 100);
    return ESC_MIN_US + (speed_percent * (ESC_MAX_US - ESC_MIN_US) / 100);
}

uint32_t MotorController::us_to_ticks(int us) const {
    return us * 10; // 10MHz clock = 10 ticks per microsecond
}

bool MotorController::set_motor_speed(char motor_id, int speed_percent) {
    if (speed_percent < 0 || speed_percent > 100) {
        return false;
    }
    
    int pulse_width_us = percent_to_us(speed_percent);
    uint32_t pulse_ticks = us_to_ticks(pulse_width_us);
    
    esp_err_t err;
    if (motor_id == 'A' || motor_id == 'a') {
        err = mcpwm_comparator_set_compare_value(comparator_a, pulse_ticks);
        if (err == ESP_OK) {
            current_speed_a = speed_percent;
            return true;
        }
    } else if (motor_id == 'B' || motor_id == 'b') {
        err = mcpwm_comparator_set_compare_value(comparator_b, pulse_ticks);
        if (err == ESP_OK) {
            current_speed_b = speed_percent;
            return true;
        }
    }
    
    return false;
}

bool MotorController::set_motors_speed(int speed, float ramp_time) {
    if (speed < 0 || speed > 100) {
        Serial.println("–û—à–∏–±–∫–∞: –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%");
        return false;
    }
    
    if (ramp_time > 0) {
        ramp_speed(speed, ramp_time);
        return true;
    }
    
    bool success_a = set_motor_speed('A', speed);
    bool success_b = set_motor_speed('B', speed);
    
    if (success_a && success_b) {
        int pulse_us = percent_to_us(speed);
        Serial.printf("–ú–æ—Ç–æ—Ä—ã: %d%% (%dŒºs)\n", speed, pulse_us);
        return true;
    }
    
    return false;
}

void MotorController::ramp_speed(int target_speed, float duration) {
    int start_speed = current_speed_a;
    int steps = max(1, (int)(duration * 10)); // 10 —à–∞–≥–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    float step_size = (target_speed - start_speed) / (float)steps;
    
    for (int i = 0; i < steps; i++) {
        int intermediate_speed = start_speed + (int)(step_size * (i + 1));
        intermediate_speed = constrain(intermediate_speed, 0, 100);
        
        set_motor_speed('A', intermediate_speed);
        set_motor_speed('B', intermediate_speed);
        
        delay(100);
    }
}

void MotorController::stop_motors(float ramp_time) {
    if (ramp_time > 0) {
        ramp_speed(0, ramp_time);
    } else {
        set_motor_speed('A', 0);
        set_motor_speed('B', 0);
    }
    Serial.println("–ú–æ—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
}

bool MotorController::start_test_sequence() {
    if (is_test_running) {
        Serial.println("–¢–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
        return false;
    }
    
    Serial.println("=== –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –ü–†–û–ì–û–ù–ê ESC ===");
    Serial.println("1. –ü–ª–∞–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–æ 70%...");
    
    is_test_running = true;
    test_start_time = millis();
    last_report_time = 0;
    
    set_motors_speed(TEST_SPEED_PERCENT, 5.0);
    
    Serial.println("2. –†–∞–±–æ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ (4 –º–∏–Ω—É—Ç—ã)...");
    Serial.printf("–°–∫–æ—Ä–æ—Å—Ç—å: %d%%, –ò–º–ø—É–ª—å—Å: %dŒºs\n", TEST_SPEED_PERCENT, percent_to_us(TEST_SPEED_PERCENT));
    
    return true;
}

void MotorController::stop_test_sequence() {
    if (!is_test_running) return;
    
    Serial.println("3. –ü–ª–∞–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–æ–≤...");
    stop_motors(4.0);
    
    is_test_running = false;
    unsigned long test_duration = (millis() - test_start_time) / 1000;
    Serial.printf("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %lu —Å–µ–∫—É–Ω–¥\n", test_duration);
}

String MotorController::get_motors_status() const {
    unsigned long elapsed_seconds = is_test_running ? (millis() - test_start_time) / 1000 : 0;
    
    char buffer[200];
    snprintf(buffer, sizeof(buffer), 
        "{\"motor_a\":%d,\"motor_b\":%d,\"pulse_us\":%d,"
        "\"test_running\":%s,\"test_time\":%lu,\"test_total\":%d}",
        current_speed_a, current_speed_b, 
        percent_to_us(current_speed_a),
        is_test_running ? "true" : "false", 
        elapsed_seconds, TEST_DURATION_SEC);
    
    return String(buffer);
}

bool MotorController::is_test_active() const {
    return is_test_running;
}

void MotorController::update() {
    if (!is_test_running) return;
    
    unsigned long current_time = millis();
    unsigned long elapsed_seconds = (current_time - test_start_time) / 1000;
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    if (elapsed_seconds - last_report_time >= 30) {
        Serial.printf("–¢–µ—Å—Ç: %lu/%d —Å–µ–∫\n", elapsed_seconds, TEST_DURATION_SEC);
        last_report_time = elapsed_seconds;
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (elapsed_seconds >= TEST_DURATION_SEC) {
        stop_test_sequence();
    }
}


//  ==========================================================================================
//  üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
//  
//      ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–º–ø—É–ª—å—Å–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
//      ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
//      ‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
//      ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å—Ç–∞—Ç—É—Å
//      ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - MotorResources –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ—Ç–æ—Ä–∞
//      ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
//      ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ JSON
//      ‚úÖ –õ—É—á—à–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å —ç–º–æ–¥–∑–∏ –∏ —É—Ä–æ–≤–Ω—è–º–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏
//  
//  –¢–µ–ø–µ—Ä—å –∫–æ–¥ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π, —á–∏—Ç–∞–µ–º—ã–π –∏ –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–π! üöÄ


/*

–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—ã—á–Ω—ã–º PWM (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)

–ï—Å–ª–∏ —Å MCPWM Prelude –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ—Ç –≤–µ—Ä—Å–∏—è —Å –æ–±—ã—á–Ω—ã–º PWM:
cpp

/ * *
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ PWM
 * /

#include <Arduino.h>

class MotorController {
private:
  const int ESC_A_PIN = 25;
  const int ESC_B_PIN = 26;
  const int PWM_FREQ = 50;
  const int PWM_RESOLUTION = 16;
  
  int percent_to_duty(int speed_percent) {
    return map(speed_percent, 0, 100, 3275, 6553); // –î–ª—è 16-bit resolution
  }
  
public:
  MotorController() {
    ledcSetup(0, PWM_FREQ, PWM_RESOLUTION);
    ledcSetup(1, PWM_FREQ, PWM_RESOLUTION);
    ledcAttachPin(ESC_A_PIN, 0);
    ledcAttachPin(ESC_B_PIN, 1);
    set_motors_speed(0);
  }
  
  void set_motors_speed(int speed) {
    int duty = percent_to_duty(speed);
    ledcWrite(0, duty);
    ledcWrite(1, duty);
  }
};

//  –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
        –ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
    ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è #include <driver/mcpwm_prelude.h>
    ‚úÖ –ù–æ–≤—ã–π API MCPWM —Å handles –≤–º–µ—Å—Ç–æ legacy —Ñ—É–Ω–∫—Ü–∏–π
    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
    ‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
    ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ ESP_ERROR_CHECK
–¢–µ–ø–µ—Ä—å –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä MCPWM –±–µ–∑ deprecated –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!
*/

//-------------------------------------------------------------------------

/*
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å LEDC PWM

–ï—Å–ª–∏ MCPWM Prelude –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ—Ç –Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å LEDC:
cpp

/ * *
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å LEDC PWM –¥–ª—è ESC
 * /

#include <Arduino.h>

class SimpleMotorController {
private:
  const int ESC_A_PIN = 25;
  const int ESC_B_PIN = 26;
  const int PWM_FREQ = 50;
  const int PWM_RESOLUTION = 16;
  
  int current_speed_a = 0;
  int current_speed_b = 0;
  bool is_test_running = false;
  unsigned long test_start_time = 0;
  
  int percent_to_duty(int speed_percent) {
    // –î–ª—è 16-bit resolution: 0% = 3275, 100% = 6553
    return map(constrain(speed_percent, 0, 100), 0, 100, 3275, 6553);
  }
  
  void ramp_speed(int target_speed, float duration) {
    int start_speed = current_speed_a;
    int steps = duration * 10;
    float step_size = (target_speed - start_speed) / steps;
    
    for (int i = 0; i < steps; i++) {
      int speed = start_speed + step_size * (i + 1);
      set_motors_speed(speed, 0);
      delay(100);
    }
  }

public:
  SimpleMotorController() {
    ledcSetup(0, PWM_FREQ, PWM_RESOLUTION);
    ledcSetup(1, PWM_FREQ, PWM_RESOLUTION);
    ledcAttachPin(ESC_A_PIN, 0);
    ledcAttachPin(ESC_B_PIN, 1);
    set_motors_speed(0);
    Serial.println("SimpleMotorController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }
  
  void set_motors_speed(int speed, float ramp_time = 0) {
    speed = constrain(speed, 0, 100);
    
    if (ramp_time > 0) {
      ramp_speed(speed, ramp_time);
    } else {
      int duty = percent_to_duty(speed);
      ledcWrite(0, duty);
      ledcWrite(1, duty);
      current_speed_a = speed;
      current_speed_b = speed;
      Serial.printf("–ú–æ—Ç–æ—Ä—ã: %d%%\n", speed);
    }
  }
  
  void start_test_sequence() {
    Serial.println("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞...");
    set_motors_speed(70, 5.0);
    is_test_running = true;
    test_start_time = millis();
  }
  
  void update() {
    if (is_test_running && millis() - test_start_time > 240000) {
      set_motors_speed(0, 4.0);
      is_test_running = false;
      Serial.println("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
    }
  }
};

SimpleMotorController motor_controller;

–ö–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    ‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä
    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã intr_priority = 0 –∏ allow_pd = false
    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
    ‚úÖ –£–ø—Ä–æ—â–µ–Ω —Ä–∞—Å—á–µ—Ç –∏–º–ø—É–ª—å—Å–æ–≤ –¥–ª—è ESC
    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å LEDC
–¢–µ–ø–µ—Ä—å –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!
–¢–µ–ø–µ—Ä—å –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä MCPWM –±–µ–∑ deprecated –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!



*/