
/**================================================
 * @file ESP32_Air_Plane_0001.ino
 * @brief –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–ü–õ–ê
 * @version 2.0
 * @date 2024
 *================================================
 * –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:
 * - –†–∞–¥–∏–æ–º–æ–¥—É–ª—å E49 –¥–ª—è –ø—Ä–∏–µ–º–∞ –∫–æ–º–∞–Ω–¥
 * - IMU ICM-20948 –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–∞–º–∏ —ç–ª–µ—Ä–æ–Ω–æ–≤
 * - SD –∫–∞—Ä—Ç—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 * - –°–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 */

#include <Arduino.h>
#include <SPI.h>
#include "SPI_Manager.h"
#include "ICM_Handler.h"
#include "SD_Handler.h"
#include "Eleron_Controller.h"
#include "E49_Controller.h"
#include "Config.h"

// ================== –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ==================


// ================== –°–ò–°–¢–ï–ú–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==================

SystemState systemState = SystemState::BOOT;
SystemState previousState = SystemState::BOOT;
uint32_t systemStartTime = 0;
uint32_t errorCount = 0;
uint32_t lastStatusPrint = 0;

// ================== –≠–ö–ó–ï–ú–ü–õ–Ø–†–´ –ú–û–î–£–õ–ï–ô ==================
E49_Controller radioReceiver(false, &Serial2);

// ================== –ü–†–û–¢–û–¢–ò–ü–´ –§–£–ù–ö–¶–ò–ô ==================
void initializeSystem();
void initializeAllPins();
void handleSystemState();
void processSensors();
void handleRadioCommunication();
void controlOutputs();
void logTelemetry();
void updateSystemStatus();
void handleEmergency();
void systemRecovery();
void printStatusReport();
void checkSystemHealth();

// ================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================

//  1. –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∏–Ω–æ–≤ –≤ setup():
void initializeAllPins() {
  // –ü–∏–Ω—ã EBYTE
  pinMode(E49_PIN_M0, OUTPUT);
  pinMode(E49_PIN_M1, OUTPUT);
  pinMode(E49_PIN_AUX, INPUT);

  // SPI –ø–∏–Ω—ã
  pinMode(VSPI_SCLK, OUTPUT);
  pinMode(VSPI_MISO, INPUT);
  pinMode(VSPI_MOSI, OUTPUT);
  pinMode(SPI_ICM_CS, OUTPUT);
  pinMode(SPI_SD_CS, OUTPUT);
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏–Ω—ã
  pinMode(SPI_ICM_INT, INPUT);

  // –ü–∏–Ω—ã —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤
  for (int i = 0; i < 5; i++) {
    pinMode(servoPins[i], OUTPUT);
  }

  // –°–≤–µ—Ç–æ–¥–∏–æ–¥
  pinMode(LED_PIN, OUTPUT);


  Serial.println("All pins initialized");
}  // end  initializeAllPins()




void setup() {
    initializeAllPins();

    Serial.begin(115200);
    Serial2.begin(9600, SERIAL_8N1, E49_PIN_RX, E49_PIN_TX);
    
            // handleRadioCommunication();
    Serial.println("\n=== –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ü–õ–ê ===");
    Serial.println("–í–µ—Ä—Å–∏—è 2.0 - –ó–∞–ø—É—Å–∫...");
    
    initializeSystem();
    systemStartTime = millis();

    delay(1000);
}

void loop() {
    static uint32_t loopStart = millis();
    uint32_t currentTime = millis();
    handleRadioCommunication() ;
    handleSystemState();
    processSensors();
    controlOutputs();
    logTelemetry();
    updateSystemStatus();
    checkSystemHealth();
    
    // –°—Ç–∞–±–∏–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ü–∏–∫–ª–∞
    uint32_t processingTime = millis() - currentTime;
    if (processingTime < 10) {
        delay(10 - processingTime);
    }

    // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    uint32_t loopTime = millis() - loopStart;
    if (loopTime > 50) {  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Ü–∏–∫–ª > 50–º—Å
        Serial.printf("‚ö†Ô∏è Long loop time: %lumS\n", loopTime);
    }

}

// ================== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô ==================
void initializeSystem() {
    systemState = SystemState::INITIALIZING;
    Serial.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...");
    
    // bool allOk = true;

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
    // –î–æ–±–∞–≤—å—Ç–µ —Ç–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    uint32_t initStart = millis();
    while (!ICMHandler::begin() && (( millis() - initStart) < 10000)) {
        Serial.println("‚ö†Ô∏è Retrying ICM initialization...");
        delay(1000);
    }
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPI
    SPIManager::begin();
    Serial.println("SPI –º–µ–Ω–µ–¥–∂–µ—Ä: OK");
    
    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IMU
    if (ICMHandler::begin()) {
        Serial.println("ICM-20948: OK");
    } else {
        Serial.println("ICM-20948: ERROR");
        systemState = SystemState::ERROR;
        return;
    }
    
    // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SD –∫–∞—Ä—Ç—ã
    if (SDHandler::begin()) {
        Serial.println("SD –∫–∞—Ä—Ç–∞: OK");
    } else {
        Serial.println("SD –∫–∞—Ä—Ç–∞: WARNING");
    }
    
    // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ—Ä–æ–Ω–æ–≤
    EleronController::begin();
    Serial.println("–°–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥—ã: OK");
    
    // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–¥–∏–æ–º–æ–¥—É–ª—è
    if (radioReceiver.init() == EbyteStatus::SUCCESS) {
        Serial.println("–†–∞–¥–∏–æ–º–æ–¥—É–ª—å: OK");
    } else {
        Serial.println("–†–∞–¥–∏–æ–º–æ–¥—É–ª—å: ERROR");
        systemState = SystemState::ERROR;
        return;
    }
    
    systemState = SystemState::STANDBY;
    Serial.println("=== –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê ===");
}

void handleSystemState() {
        //  static uint32_t lastStateChange = 0;
    
    switch (systemState) {
        case SystemState::STANDBY:
            // –ú–∏–≥–∞–Ω–∏–µ LED –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
            digitalWrite(LED_PIN, millis() % 1000 < 500);
            break;
            
        case SystemState::ACTIVE:
            // –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
            digitalWrite(LED_PIN, HIGH);
            break;
            
        case SystemState::ERROR:
            // –ê–≤–∞—Ä–∏–π–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
            digitalWrite(LED_PIN, millis() % 200 < 100);
            break;
            
        case SystemState::RECOVERY:
            systemRecovery();
            break;
            
        default:
            break;
    }
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (systemState != previousState) {
        Serial.printf("–°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %d -> %d\n", 
                     static_cast<int>(previousState), 
                     static_cast<int>(systemState));
        previousState = systemState;
              //  lastStateChange = millis();
    }
}

void processSensors() {
    static uint32_t lastIMURead = 0;
    
    if (millis() - lastIMURead >= ICM_READ_INTERVAL) {
        if (ICMHandler::readData()) {
            SensorData data = ICMHandler::getData();
            EleronController::update(data);
        }
        lastIMURead = millis();
    }
}

void handleRadioCommunication() {
    static uint32_t lastRadioProcess = 0;
    
    if (millis() - lastRadioProcess >= RADIO_PROCESS_INTERVAL) {
        radioReceiver.process(); // –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∞
        //  radioReceiver.process();
        lastRadioProcess = millis();
    }
}

void controlOutputs() {
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ EleronController
}

void logTelemetry() {
    static uint32_t lastSDWrite = 0;
    
    if (millis() - lastSDWrite >= SD_WRITE_INTERVAL) {
        SensorData data = ICMHandler::getData();
        SDHandler::writeData(data);
        lastSDWrite = millis();
    }
}

void updateSystemStatus() {
    static uint32_t lastStatusUpdate = 0;
    
    if (millis() - lastStatusUpdate >= STATUS_UPDATE_INTERVAL) {
        printStatusReport();
        lastStatusUpdate = millis();
    }
}

void handleEmergency() {
    Serial.println("!!! –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú !!!");
    EleronController::setNeutralPosition();
    
    static uint32_t emergencyStart = 0;
    if (emergencyStart == 0) {
        emergencyStart = millis();
    }
    
    if (millis() - emergencyStart > 10000) {
        systemState = SystemState::RECOVERY;
        emergencyStart = 0;
    }
}

void systemRecovery() {
    Serial.println("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...");
    
    SDHandler::end();
    delay(1000);
    
    if (ICMHandler::begin() && radioReceiver.init() == EbyteStatus::SUCCESS) {
        systemState = SystemState::STANDBY;
        Serial.println("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!");
    } else {
        Serial.println("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!");
        systemState = SystemState::ERROR;
    }
}

void printStatusReport() {
    Serial.println("\n=== –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ ===");
    Serial.printf("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %lu —Å–µ–∫\n", millis() / 1000);
    Serial.printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ: %d\n", static_cast<int>(systemState));
    Serial.printf("–û—à–∏–±–æ–∫: %lu\n", errorCount);
    Serial.printf("–ü–∞–º—è—Ç—å: %lu –±–∞–π—Ç\n", ESP.getFreeHeap());
    Serial.printf("–ß—Ç–µ–Ω–∏—è IMU: %lu\n", ICMHandler::getReadCount());
    Serial.printf("Radio State: %d\n", static_cast<int>(radioReceiver.getInternalState()));

    Serial.println("======================");
}

void checkSystemHealth() {
    static uint32_t lastHealthCheck = 0;
    
    if (millis() - lastHealthCheck >= ERROR_CHECK_INTERVAL) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
        float temp = temperatureRead();
        if (temp > 75.0) {
            Serial.println("–ü–µ—Ä–µ–≥—Ä–µ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞!");
            systemState = SystemState::ERROR;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        if (ESP.getFreeHeap() < 10000) {
            Serial.println("–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏!");
        }
        
        lastHealthCheck = millis();
    }
}


