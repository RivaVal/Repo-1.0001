


    //===================================================
    //  6. SD_Handler.cpp - –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
    //===================================================
    //
    //  cpp

#include "SD_Handler.h"
#include <SPI.h>

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
uint32_t SDHandler::last_write_time = 0;
uint32_t SDHandler::last_flush_time = 0;
File SDHandler::data_file;
bool SDHandler::sd_initialized = false;
uint8_t SDHandler::write_buffer[SDHandler::BUFFER_SIZE];
size_t SDHandler::buffer_index = 0;
uint32_t SDHandler::write_count = 0;
uint32_t SDHandler::error_count = 0;

bool SDHandler::begin() {
    if (!SPIManager::acquireForSD(100)) {
        Serial.println("‚ùå Failed to acquire SPI for SD");
        return false;
    }

    SPIManager::getSPI().beginTransaction(SPISettings(25000000, MSBFIRST, SPI_MODE0));
    sd_initialized = SD.begin(E49_SD_CS);
    
    if (sd_initialized) {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        if (!SD.exists("/data")) {
            SD.mkdir("/data");
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å timestamp
        char filename[32];
        snprintf(filename, sizeof(filename), "/data/data_%lu.bin", millis());
        data_file = SD.open(filename, FILE_WRITE);
        
        if (!data_file) {
            Serial.println("‚ùå Failed to open data file");
            sd_initialized = false;
        } else {
            Serial.println("‚úÖ SD card and file initialized");
            Serial.printf("üìä Free space: %llu bytes\n", getFreeSpace());
        }
    }
    
    SPIManager::getSPI().endTransaction();
    SPIManager::release();

    last_write_time = millis();
    last_flush_time = millis();
    buffer_index = 0;
    
    return sd_initialized;
}

bool SDHandler::writeData(const SensorData& data) {
    if (!sd_initialized) return false;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    if (!checkFreeSpace()) {
        Serial.println("‚ö†Ô∏è Low disk space, stopping writes");
        sd_initialized = false;
        return false;
    }
    
    uint32_t current_time = millis();
    if ((uint32_t)(current_time - last_write_time) < WRITE_INTERVAL) {
        return false;
    }

    // –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (buffer_index + sizeof(data) > BUFFER_SIZE) {
        if (!flushBuffer()) {
            error_count++;
            return false;
        }
    }
    
    memcpy(&write_buffer[buffer_index], &data, sizeof(data));
    buffer_index += sizeof(data);
    write_count++;
    
    // –ê–≤—Ç–æ-—Å–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
    if (current_time - last_flush_time > 5000 || buffer_index >= BUFFER_SIZE * 0.8) {
        if (!flushBuffer()) {
            error_count++;
            return false;
        }
    }
    
    last_write_time = current_time;
    return true;
}

bool SDHandler::flushBuffer() {
    if (buffer_index == 0) return true;
    
    if (!SPIManager::acquireForSD(100)) {
        Serial.println("‚ö†Ô∏è Could not acquire SPI for flush");
        return false;
    }

    bool success = false;
    SPIManager::getSPI().beginTransaction(SPISettings(25000000, MSBFIRST, SPI_MODE0));
    
    if (data_file) {
        size_t bytes_written = data_file.write(write_buffer, buffer_index);
        success = (bytes_written == buffer_index);
        
        if (success) {
            data_file.flush();
            Serial.printf("üíæ Flushed %d bytes to SD\n", buffer_index);
        } else {
            Serial.printf("‚ùå Write failed: %d/%d bytes\n", bytes_written, buffer_index);
        }
    }
    
    SPIManager::getSPI().endTransaction();
    SPIManager::release();
    
    buffer_index = 0;
    last_flush_time = millis();
    return success;
}

bool SDHandler::checkFreeSpace() {
    if (!sd_initialized) return false;
    
    uint64_t free_space = getFreeSpace();
    if (free_space < MIN_FREE_SPACE) {
        Serial.printf("‚ö†Ô∏è Low disk space: %llu bytes left\n", free_space);
        return false;
    }
    
    return true;
}

uint64_t SDHandler::getFreeSpace() {
    if (!sd_initialized) return 0;
    
    if (!SPIManager::acquireForSD(50)) return 0;
    
    SPIManager::getSPI().beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE0));
    uint64_t total = SD.totalBytes();
    uint64_t used = SD.usedBytes();
    SPIManager::getSPI().endTransaction();
    SPIManager::release();
    
    return (total > used) ? (total - used) : 0;
}

void SDHandler::end() {
    // –°–±—Ä–æ—Å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ
    if (buffer_index > 0) {
        flushBuffer();
    }
    
    if (data_file) {
        data_file.close();
        Serial.println("‚úÖ Data file closed");
    }
    
    sd_initialized = false;
    buffer_index = 0;
}

float SDHandler::getSuccessRate() {
    return (write_count > 0) ? (100.0f * (write_count - error_count) / write_count) : 100.0f;
}