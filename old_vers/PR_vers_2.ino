    //–ü–†–ò–í–ï–¢!!!–£–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞, 
    //  –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ 
    //  –∞–¥—Ä–µ—Å—É: https://github.com/RivaVal/Repo-1.0001.git –ü—Ä–æ—à—É  –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å 
    //  –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ github, –ø—Ä–æ—à—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–∂–¥—É–ª–µ–π –¥–∞—Ç—å 
    //  –≤–∞—Ä–∏–∞–Ω—Ç main PR_vers_2.ino –º–æ–¥—É–ª—è —Å —Ü–µ–ª—å—é —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è 
    //  —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞???
    //
    //  –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–∞ GitHub. 
    //  –í–æ—Ç —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main_PR_vers_2.ino, –∫–æ—Ç–æ—Ä–∞—è –æ–±–µ—Å–ø–µ—á–∏—Ç 
    //  —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π:
üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô MAIN MODULE
    //  cpp
    //
#include <Arduino.h>
#include "SPI_Manager.h"
#include "ICM_Handler.h"
#include "SD_Handler.h"
#include "Eleron_Controller.h"
#include "E49_Controller.h"
#include "E49_Config.h"

// ================== –°–ò–°–¢–ï–ú–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==================
SystemState systemState = SystemState::INIT;
uint32_t lastStatusPrint = 0;
uint32_t systemStartTime = 0;
uint32_t errorCount = 0;

// ================== –û–ë–™–ï–ö–¢–´ –ú–û–î–£–õ–ï–ô ==================
E49_Controller radioController(false, &Serial2); // Receiver mode

// ================== –ü–†–û–¢–û–¢–ò–ü–´ –§–£–ù–ö–¶–ò–ô ==================
void initializeSystem();
void handleSystemState();
void printSystemStatus();
void handleErrors();
void emergencyRecovery();

// ================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================
void setup() {
    Serial.begin(115200);
    Serial2.begin(9600, SERIAL_8N1, E49_PIN_RX, E49_PIN_TX);
    
    delay(1000); // –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è
    
    Serial.println("\n=== SYSTEM BOOT ===");
    Serial.println("Initializing modules...");
    
    initializeSystem();
    systemStartTime = millis();
}

void loop() {
    handleSystemState();
    handleErrors();
    
    // –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    if (millis() - lastStatusPrint > 5000) {
        printSystemStatus();
        lastStatusPrint = millis();
    }
    
    delay(1); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ watchdog
}

// ================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ ==================
void initializeSystem() {
    systemState = SystemState::INIT;
    
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–Ω–æ–≤
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, HIGH);
    
    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SPI –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if (!SPIManager::begin()) {
        Serial.println("ERROR: SPI Manager init failed!");
        systemState = SystemState::ERROR;
        return;
    }
    
    // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ICM-20948
    if (!ICMHandler::begin()) {
        Serial.println("ERROR: ICM-20948 init failed!");
        systemState = SystemState::ERROR;
        return;
    }
    
    // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SD –∫–∞—Ä—Ç—ã
    if (!SDHandler::begin()) {
        Serial.println("WARNING: SD Card init failed - continuing without SD");
        // –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    }
    
    // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ—Ä–æ–Ω–æ–≤
    EleronController::begin();
    
    // 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–¥–∏–æ–º–æ–¥—É–ª—è
    if (radioController.init() != EBYTE_SUCCESS) {
        Serial.println("ERROR: Radio controller init failed!");
        systemState = SystemState::ERROR;
        return;
    }
    
    systemState = SystemState::RUNNING;
    digitalWrite(LED_PIN, LOW);
    Serial.println("=== SYSTEM INITIALIZED SUCCESSFULLY ===");
}

// ================== –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò ==================
void handleSystemState() {
    static uint32_t lastICMTime = 0;
    static uint32_t lastSDTime = 0;
    static SensorData currentData;
    
    switch (systemState) {
        case SystemState::RUNNING:
            // 1. –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å ICM-20948 (20ms)
            if (millis() - lastICMTime >= 20) {
                if (ICMHandler::readData(currentData)) {
                    // 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ—Ä–æ–Ω–∞–º–∏
                    EleronController::update(currentData);
                    
                    // 3. –ó–∞–ø–∏—Å—å –Ω–∞ SD –∫–∞—Ä—Ç—É (500ms)
                    if (millis() - lastSDTime >= 500) {
                        SDHandler::writeData(currentData);
                        lastSDTime = millis();
                    }
                    
                    // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
                    radioController.process();
                }
                lastICMTime = millis();
            }
            break;
            
        case SystemState::ERROR:
            // –ú–∏–≥–∞–Ω–∏–µ LED –ø—Ä–∏ –æ—à–∏–±–∫–µ
            static uint32_t lastBlink = 0;
            if (millis() - lastBlink > 500) {
                digitalWrite(LED_PIN, !digitalRead(LED_PIN));
                lastBlink = millis();
            }
            
            // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            static uint32_t lastRecoveryAttempt = 0;
            if (millis() - lastRecoveryAttempt > 10000) {
                emergencyRecovery();
                lastRecoveryAttempt = millis();
            }
            break;
            
        case SystemState::INIT:
            // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –∂–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            break;
    }
}

// ================== –°–ò–°–¢–ï–ú–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì ==================
void printSystemStatus() {
    Serial.println("\n=== SYSTEM STATUS ===");
    Serial.printf("Uptime: %.1f seconds\n", (millis() - systemStartTime) / 1000.0);
    Serial.printf("System State: %d\n", static_cast<int>(systemState));
    Serial.printf("Errors: %lu\n", errorCount);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª–µ–π
    Serial.printf("ICM Reads: %lu\n", ICMHandler::getReadCount());
    Serial.printf("SD Writes: %lu\n", SDHandler::getWriteCount());
    Serial.printf("SPI Transactions: %lu\n", SPIManager::getTransactionCount());
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏
    Serial.printf("Free Heap: %d bytes\n", ESP.getFreeHeap());
    Serial.println("=====================");
}

// ================== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==================
void handleErrors() {
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è SPI
    if (SPIManager::getErrorCount() > 0) {
        Serial.println("SPI error detected!");
        errorCount++;
        SPIManager::resetErrorCount();
    }
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è ICM
    if (ICMHandler::getErrorCount() > 10) {
        Serial.println("ICM sensor error!");
        systemState = SystemState::ERROR;
        errorCount += ICMHandler::getErrorCount();
        ICMHandler::resetErrorCount();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≥—Ä–µ–≤–∞
    if (temperatureRead() > 75.0) {
        Serial.println("CPU overheating!");
        systemState = SystemState::ERROR;
    }
}

// ================== –ê–í–ê–†–ò–ô–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï ==================
void emergencyRecovery() {
    Serial.println("Attempting emergency recovery...");
    
    // 1. –°–±—Ä–æ—Å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    SPIManager::reset();
    ICMHandler::reset();
    SDHandler::end();
    
    // 2. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    delay(1000);
    
    if (SPIManager::begin() && 
        ICMHandler::begin() && 
        radioController.init() == EBYTE_SUCCESS) {
        
        systemState = SystemState::RUNNING;
        Serial.println("Recovery successful!");
        digitalWrite(LED_PIN, LOW);
    } else {
        Serial.println("Recovery failed!");
    }
}

// ================== WATCHDOG –ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ==================
#ifdef ESP32
void enableWatchdog() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ hardware watchdog
    esp_task_wdt_init(5, true); // 5 —Å–µ–∫—É–Ω–¥
    esp_task_wdt_add(NULL);
}
#endif

void safeDelay(uint32_t ms) {
    uint32_t start = millis();
    while (millis() - start < ms) {
        yield();
        esp_task_wdt_reset();
    }
}

üéØ –ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:
1. –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
cpp

enum class SystemState {
    INIT,      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    RUNNING,   // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    ERROR      // –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º
};

2. –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫

3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞

    ICM-20948: 20ms (50Hz)

    –≠–ª–µ—Ä–æ–Ω—ã: 20ms (50Hz)

    SD –∫–∞—Ä—Ç–∞: 500ms (2Hz)

    –†–∞–¥–∏–æ: –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ

4. –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

    –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏

    –°—á–µ—Ç—á–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π

5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

    Watchdog timer

    –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞

    –ê–≤–∞—Ä–∏–π–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

üìä –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£:

    –ó–∞–≥—Ä—É–∑–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∫–∞–∫ main_PR_vers_2.ino

    –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã

    –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ Serial –º–æ–Ω–∏—Ç–æ—Ä–æ–º

    –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

–≠—Ç–æ—Ç –∫–æ–¥ –æ–±–µ—Å–ø–µ—á–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏ —Å–±–æ—è—Ö! üöÄ
