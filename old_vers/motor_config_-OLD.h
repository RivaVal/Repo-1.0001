//  –û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤–ª—é –ø–æ–ª–Ω—É—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏.
//  üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:
//  text
//  
//  motor_controller/
//  ‚îú‚îÄ‚îÄ motor_controller.h          // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª
//  ‚îú‚îÄ‚îÄ motor_controller.cpp        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
//  ‚îú‚îÄ‚îÄ motor_config.h              // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–Ω–æ–≤—ã–π —Ñ–∞–π–ª)
//  ‚îî‚îÄ‚îÄ motor_controller_private.h  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–Ω–æ–≤—ã–π —Ñ–∞–π–ª)
//  
//  üìÑ motor_config.h
//  cpp
//  
#pragma once

#ifndef MOTOR_CONFIG_H
#define MOTOR_CONFIG_H

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö –ø–∏–Ω–æ–≤
struct MotorHardwareConfig {
    static constexpr int ESC_A_PIN = 25;
    static constexpr int ESC_B_PIN = 26;
};

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ESC (–º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã)
struct ESCConfig {
    static constexpr int MIN_US = 1000;      // 0% —Å–∫–æ—Ä–æ—Å—Ç–∏ (—Å—Ç–æ–ø)
    static constexpr int MAX_US = 2000;      // 100% —Å–∫–æ—Ä–æ—Å—Ç–∏
    static constexpr int NEUTRAL_US = 1500;  // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    static constexpr int FREQUENCY = 50;     // 50 Hz –¥–ª—è ESC
};

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞
struct TestConfig {
    static constexpr int SPEED_PERCENT = 70;  // –¢–µ—Å—Ç–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (70%)
    static constexpr int DURATION_SEC = 240;  // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ (240 —Å–µ–∫)
    static constexpr int REPORT_INTERVAL = 30;// –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç—á–µ—Ç–æ–≤ (—Å–µ–∫)
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCPWM
struct MCPWMConfig {
    static constexpr int GROUP_ID = 0;
    static constexpr int CLOCK_HZ = 10 * 1000 * 1000; // 10MHz
    static constexpr int PERIOD_TICKS = 200000;       // 50Hz: 10MHz / 50Hz
    static constexpr int INTR_PRIORITY = 0;
};

#endif

